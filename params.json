{"name":"Aop.metrics-clj","tagline":"Measuring how AspectJ is used in practice","body":"**Table of Contents**  *generated with [DocToc](http://doctoc.herokuapp.com/)*\r\n\r\n- [The Hierarchy of The Research Questions ](#the-hierarchy-of-the-research-questions)\r\n\r\n- [Have a look at an example](#have-a-look-at-an-example)\r\n\r\n- [Quick Access](#quick-access)\r\n\r\n- [How the metrics work?](#how-to-run-the-metrics)\r\n\r\n### Master Thesis\r\n---\r\n\r\nThe aim of my master project is to analyse the existing **[AspectJ](http://eclipse.org/aspectj/)** applications. In order to collect proper information, I have implemented several metrics consisting of **[aspect-oriented programming](http://en.wikipedia.org/wiki/Aspect-oriented_programming) (AOP)** and **[object-oriented programming](http://en.wikipedia.org/wiki/Object-oriented_programming) (OOP)** features.\r\n\r\n### The Hierarchy of The Research Questions \r\n---\r\n\r\n1.\tHow large is the system?\r\n\t*\tLines of Code (LOC) \r\n\t*\tVocabulary Size (VS) \r\n\t*\tNumber of Attributes (NOA) \r\n\t*\tNumber of Methods (NOM)\r\n2.\tHow often are AOP constructs used compared to OOP features?\r\n\t*\tNumber of Intertype (NOI)\r\n\t*\tNumber of Advices (NOAd)\r\n3.\tWhich AOP constructs are typically used?\r\n\t*\tInherited Aspects (InA)\r\n\t*\tSingleton Aspects (SA)\r\n\t*\tNon-Singleton Aspects (nSA)\r\n\t*\tAdvice-Advance Pointcut Dependence (AAP)\r\n\t*\tAdvice-Basic Pointcut Dependence (ABP)\r\n\t*\tNumber of Around Advice (NOAr)\r\n\t*\tNumber of Before/After Advice (NOBA)\r\n\t*\tNumber of After Throwing/Returning Advice (NOTR)\r\n\t*\tNumber of Call (NOC)\r\n\t*\tNumber of Execution (NOE)\r\n\t*\tNumber of AdviceExecution (AE)\r\n\t*\tNumber of Wildcards (NOW)\r\n\t*\tNumber of non-Wildcards (NOnW)\r\n\t*\tArgument size of Args-Advice (AAd)\r\n\t*\tArgument size of Args-Advice-args (AAda)\r\n4.\tWhat percentage of a system is advised by AOP?\r\n\t*\tNumber of Advised Classes (AdC)\r\n\t*\tNumber of non-Advised Classes (nAdC)\r\n\t*\tNumber of Advised Methods (AdM)\r\n\t*   Number of non-Advised Methods (nAdM)\r\n\t*\tClasses and Subclasses (CsC)\r\n\t*\tAverage of Subclasses of Classes (AScC)\r\n5.\tIs there a connection between the amount of coupling in an aspect, and how many shadows it advises?\r\n\t*\tAdvice-Join Point Shadow Dependence (AJ)\r\n\t*\tNumber of thisJoinPoint/Static (NOJPS)\r\n\t*\tNumber of Modified Args (MoA)\r\n\t*\tNumber of Accessed Args (AcA)\r\n\t*\tAround Advice - non-Proceed Call Dependence (AnP)\r\n6.\tHow many dependencies are there between classes and aspects?\t\r\n\t*\tAttribute-Class Dependence Measure (AtC)\r\n\t*\tAdvice-Class Dependence (AC)\r\n\t*\tIntertype-Class Dependence (IC) \r\n\t*\tMethod-Class Dependence (MC) \r\n\t*\tPointcut-Class Dependence (PC) \r\n\t*\tAdvice-Method Dependence (AM) \r\n\t*\tIntertypeMethod-Class Dependence (IM) \r\n\t*\tMethod-Method Dependence (MM) \r\n\t*\tPointcut-Method Dependence (PM) \r\n\r\n\r\n### Have a look at an example\r\n---\r\nOne of the questions we examine is: how many aspects extend to an abstract aspect in a given aspect-oriented project?\r\n\r\nThe Metric representation of the question is: the number of inherited aspects in a given aspect-oriented project.\r\n\r\n```Clojure\r\n (defn NOInheritedAspects [?aspectname ?abstractname]\r\n         (l/fresh [?aspect ?source ?super]\r\n                   (NOAspects ?aspect ?source)\r\n                   (w/aspect-declaredsuper ?aspect ?super)\r\n                   (equals ?aspectname (str \"Aspect {\"(.getSimpleName ?aspect)\"}\"))\r\n                   (equals ?abstractname (str \"From Abstract Aspect -> \"(.getSimpleName ?super)))\r\n                   (succeeds (.isAbstract ?super))))\r\n```\r\n\r\n### Quick Access\r\n---\r\n\r\nThe implemented 41 metrics.. ([See them](https://github.com/ozlerhakan/AOPMetrics-EkekoAJFX/blob/master/Ekeko%20AJFX/src/ekeko_ajfx/AOPMetrics.clj))\r\n\r\n### How the metrics work?\r\n---\r\n\r\nFirst of all, make sure that you have all dependencies about the Ekeko Plugin in your Eclipse IDE, if not, you have to download it with its dependencies from [here](https://github.com/cderoove/damp.ekeko/wiki/Getting-Started-with-Ekeko). \r\n\r\nIn addition, after importing the Ekeko as an Eclipse project, you have to import the Ekeko's AspectJ extension in order to complete all essential parts. The link of the extension is [here](https://github.com/cderoove/damp.ekeko.aspectj).\r\n\r\nNow, you can get the code of the aop.metrics-clj (Ekeko AJFX) by simply cloning the project, plus import it within the workspace of your Eclipse IDE.\r\n\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}