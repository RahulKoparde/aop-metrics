{"name":"AOP Metrics","tagline":"Measuring Aspect-Oriented Software In Practice","body":"### Master Thesis\r\n---\r\n\r\nThe aim of the thesis  is to analyse the existing **[AspectJ](http://eclipse.org/aspectj/)** applications. In order to collect proper information, a metric framework has been implemented. The framework consists of **[aspect-oriented ](http://en.wikipedia.org/wiki/Aspect-oriented_programming)** and **[object-oriented ](http://en.wikipedia.org/wiki/Object-oriented_programming)** features.\r\n\r\n### The Hierarchy of The Research Questions \r\n---\r\n\r\n1.\tHow large is the system?\r\n\t*\t*Lines of Code* [(LOC)](https://github.com/ozlerhakan/aop-metrics-ekeko/blob/master/Ekeko%20AJFX/src/ekeko_ajfx/AOPMetrics.clj#L156)\r\n\t*\t*Vocabulary Size* [(VS)](https://github.com/ozlerhakan/aop-metrics-ekeko/blob/master/Ekeko%20AJFX/src/ekeko_ajfx/AOPMetrics.clj#L191) \r\n\t*\t*Number of Attributes* [(NOA)](https://github.com/ozlerhakan/aop-metrics-ekeko/blob/master/Ekeko%20AJFX/src/ekeko_ajfx/AOPMetrics.clj#L201) \r\n\t*\t*Number of Methods* [(NOM)](https://github.com/ozlerhakan/aop-metrics-ekeko/blob/master/Ekeko%20AJFX/src/ekeko_ajfx/AOPMetrics.clj#L211)\r\n2.\tHow often are AOP constructs used compared to OOP features?\r\n\t*\t*Number of Intertype* [(NOI)](https://github.com/ozlerhakan/aop-metrics-ekeko/blob/master/Ekeko%20AJFX/src/ekeko_ajfx/AOPMetrics.clj#L238)\r\n\t*\t*Number of Advice* [(NOAd)](https://github.com/ozlerhakan/aop-metrics-ekeko/blob/master/Ekeko%20AJFX/src/ekeko_ajfx/AOPMetrics.clj#L256)\r\n3.\tWhich AOP constructs are typically used?\r\n\t*\t*Inherited Aspects* [(InA)](https://github.com/ozlerhakan/aop-metrics-ekeko/blob/master/Ekeko%20AJFX/src/ekeko_ajfx/AOPMetrics.clj#L573)\r\n\t*\t*Singleton Aspects* [(SA)](https://github.com/ozlerhakan/aop-metrics-ekeko/blob/master/Ekeko%20AJFX/src/ekeko_ajfx/AOPMetrics.clj#L580)\r\n\t*\t*Non-Singleton Aspects* [(nSA)](https://github.com/ozlerhakan/aop-metrics-ekeko/blob/master/Ekeko%20AJFX/src/ekeko_ajfx/AOPMetrics.clj#L589)\r\n\t*\t*Advice-Advanced Pointcut Dependence* [(AAP)](https://github.com/ozlerhakan/aop-metrics-ekeko/blob/master/Ekeko%20AJFX/src/ekeko_ajfx/AOPMetrics.clj#L557)\r\n\t*\t*Advice-Basic Pointcut Dependence* [(ABP)](https://github.com/ozlerhakan/aop-metrics-ekeko/blob/master/Ekeko%20AJFX/src/ekeko_ajfx/AOPMetrics.clj#L567)\r\n\t*\t*Number of Around Advice* [(NOAr)](https://github.com/ozlerhakan/aop-metrics-ekeko/blob/master/Ekeko%20AJFX/src/ekeko_ajfx/AOPMetrics.clj#L733)\r\n\t*\t*Number of Before/After Advice* [(NOBA)](https://github.com/ozlerhakan/aop-metrics-ekeko/blob/master/Ekeko%20AJFX/src/ekeko_ajfx/AOPMetrics.clj#L752)\r\n\t*\t*Number of After Throwing/Returning Advice* [(NOTR)](https://github.com/ozlerhakan/aop-metrics-ekeko/blob/master/Ekeko%20AJFX/src/ekeko_ajfx/AOPMetrics.clj#L770)\r\n\t*\t*Number of Call* [(NOC)](https://github.com/ozlerhakan/aop-metrics-ekeko/blob/master/Ekeko%20AJFX/src/ekeko_ajfx/AOPMetrics.clj#L893)\r\n\t*\t*Number of Execution* [(NOE)](https://github.com/ozlerhakan/aop-metrics-ekeko/blob/master/Ekeko%20AJFX/src/ekeko_ajfx/AOPMetrics.clj#L900)\r\n\t*\t*Adviceexecution-Advice Dependence* [(AE)](https://github.com/ozlerhakan/aop-metrics-ekeko/blob/master/Ekeko%20AJFX/src/ekeko_ajfx/AOPMetrics.clj#L596)\r\n\t*\t*Number of Wildcards* [(NOW)](https://github.com/ozlerhakan/aop-metrics-ekeko/blob/master/Ekeko%20AJFX/src/ekeko_ajfx/AOPMetrics.clj#L1128)\r\n\t*\t*Number of non-Wildcards* [(NOnW)](https://github.com/ozlerhakan/aop-metrics-ekeko/blob/master/Ekeko%20AJFX/src/ekeko_ajfx/AOPMetrics.clj#L1140)\r\n\t*\t*Argument size of Args-Advice* [(AAd)](https://github.com/ozlerhakan/aop-metrics-ekeko/blob/master/Ekeko%20AJFX/src/ekeko_ajfx/AOPMetrics.clj#L722)\r\n\t*\t*Argument size of Args-Advice-args* [(AAda)](https://github.com/ozlerhakan/aop-metrics-ekeko/blob/master/Ekeko%20AJFX/src/ekeko_ajfx/AOPMetrics.clj#L727)\r\n4.\tHow many types and members of a system are advised by AOP?\r\n\t*\t*Percentage of Advised Classes* [(AdC)](https://github.com/ozlerhakan/aop-metrics-ekeko/blob/master/Ekeko%20AJFX/src/ekeko_ajfx/AOPMetrics.clj#L851)\r\n\t*\t*Percentage of non-Advised Classes* [(nAdC)](https://github.com/ozlerhakan/aop-metrics-ekeko/blob/master/Ekeko%20AJFX/src/ekeko_ajfx/AOPMetrics.clj#L922)\r\n\t*\t*Number of Advised Methods* [(AdM)](https://github.com/ozlerhakan/aop-metrics-ekeko/blob/master/Ekeko%20AJFX/src/ekeko_ajfx/AOPMetrics.clj#L987)\r\n\t*   *Number of non-Advised Methods* [(nAdM)](https://github.com/ozlerhakan/aop-metrics-ekeko/blob/master/Ekeko%20AJFX/src/ekeko_ajfx/AOPMetrics.clj#L993)\r\n\t*\t*Classes and Subclasses* [(CsC)](https://github.com/ozlerhakan/aop-metrics-ekeko/blob/master/Ekeko%20AJFX/src/ekeko_ajfx/AOPMetrics.clj#L1046)\r\n\t*\t*Average of Subclasses of Classes* [(ScC)](https://github.com/ozlerhakan/aop-metrics-ekeko/blob/master/Ekeko%20AJFX/src/ekeko_ajfx/AOPMetrics.clj#L1076)\r\n5.\tIs there a connection between the amount of coupling in an aspect, and how many shadows it advises?\r\n\t*\t*Advice-Join Point Shadow Dependence* [(AJ)](https://github.com/ozlerhakan/aop-metrics-ekeko/blob/master/Ekeko%20AJFX/src/ekeko_ajfx/AOPMetrics.clj#L655)\r\n\t*\t*Number of thisJoinPoint/Static* [(tJPS)](https://github.com/ozlerhakan/aop-metrics-ekeko/blob/master/Ekeko%20AJFX/src/ekeko_ajfx/AOPMetrics.clj#L1154)\r\n\t*\t*Number of Modified Args* [(MoA)](https://github.com/ozlerhakan/aop-metrics-ekeko/blob/master/Ekeko%20AJFX/src/ekeko_ajfx/AOPMetrics.clj#L1225)\r\n\t*\t*Number of Accessed Args* [(AcA)](https://github.com/ozlerhakan/aop-metrics-ekeko/blob/master/Ekeko%20AJFX/src/ekeko_ajfx/AOPMetrics.clj#L1262)\r\n\t*\t*Around Advice - non-Proceed Call Dependence* [(AnP)](https://github.com/ozlerhakan/aop-metrics-ekeko/blob/master/Ekeko%20AJFX/src/ekeko_ajfx/AOPMetrics.clj#L796)\r\n6.\tHow many dependencies are there between classes and aspects?\t\r\n\t*\t*Attribute-Class Dependence* [(AtC)](https://github.com/ozlerhakan/aop-metrics-ekeko/blob/master/Ekeko%20AJFX/src/ekeko_ajfx/AOPMetrics.clj#L366)\r\n\t*\t*Advice-Class Dependence* [(AC)](https://github.com/ozlerhakan/aop-metrics-ekeko/blob/master/Ekeko%20AJFX/src/ekeko_ajfx/AOPMetrics.clj#L380)\r\n\t*\t*Intertype-Class Dependence* [(IC)](https://github.com/ozlerhakan/aop-metrics-ekeko/blob/master/Ekeko%20AJFX/src/ekeko_ajfx/AOPMetrics.clj#L414)\r\n\t*\t*Method-Class Dependence* [(MC)](https://github.com/ozlerhakan/aop-metrics-ekeko/blob/master/Ekeko%20AJFX/src/ekeko_ajfx/AOPMetrics.clj#L448)\r\n\t*\t*Pointcut-Class Dependence* [(PC)](https://github.com/ozlerhakan/aop-metrics-ekeko/blob/master/Ekeko%20AJFX/src/ekeko_ajfx/AOPMetrics.clj#L481)\r\n\t*\t*Advice-Method Dependence* [(AM)](https://github.com/ozlerhakan/aop-metrics-ekeko/blob/master/Ekeko%20AJFX/src/ekeko_ajfx/AOPMetrics.clj#L332) \r\n\t*\t*IntertypeMethod-Method Dependence* [(IM)](https://github.com/ozlerhakan/aop-metrics-ekeko/blob/master/Ekeko%20AJFX/src/ekeko_ajfx/AOPMetrics.clj#L340)\r\n\t*\t*Method-Method Dependence* [(MM)](https://github.com/ozlerhakan/aop-metrics-ekeko/blob/master/Ekeko%20AJFX/src/ekeko_ajfx/AOPMetrics.clj#L356)\r\n\t*\t*Pointcut-Method Dependence* [(PM)](https://github.com/ozlerhakan/aop-metrics-ekeko/blob/master/Ekeko%20AJFX/src/ekeko_ajfx/AOPMetrics.clj#L496) \r\n\r\n\r\n### Have a look at an example\r\n---\r\nOne of the questions we examine is: how many aspects extend to an abstract aspect in a given aspect-oriented project?\r\n\r\nThe Metric representation of the question is: the number of inherited aspects in a given aspect-oriented project.\r\n\r\n```Clojure\r\n (defn NOInheritedAspects [?aspectname ?abstractname]\r\n         (l/fresh [?aspect ?source ?super]\r\n                   (NOAspects ?aspect ?source)\r\n                   (w/aspect-declaredsuper ?aspect ?super)\r\n                   (equals ?aspectname (str \"Aspect {\"(.getSimpleName ?aspect)\"}\"))\r\n                   (equals ?abstractname (str \"From Abstract Aspect -> \"(.getSimpleName ?super)))\r\n                   (succeeds (.isAbstract ?super))))\r\n```\r\n\r\n### How the metrics work\r\n---\r\n\r\nFirst of all, make sure that you have all the dependencies about the Ekeko Plugin in your [Eclipse Kepler 4.3 IDE](http://www.eclipse.org/kepler), if not, you have to download it with its dependencies from [here](https://github.com/cderoove/damp.ekeko/wiki/Getting-Started-with-Ekeko). \r\n\r\nIn addition, after importing the Ekeko as an Eclipse project, you have to import the Ekeko's AspectJ extension in order to complete the last essential part. The link of the extension is [here](https://github.com/cderoove/damp.ekeko.aspectj).\r\n\r\nNow, you can get the code of the aop-metrics (Ekeko AJFX) by simply cloning the project, plus import it within the workspace of your Eclipse IDE.\r\n\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}